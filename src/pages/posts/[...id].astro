---
import TableOfContents from "@/components/TableOfContents.astro";
import Container from "@/components/Container.astro";
import Layout from "@/layouts/Layout.astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import { format } from "date-fns";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.id === Astro.params.id) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(post);
---

<Layout title={post.data.title} description={post.data.description}>
  <Container>
    <div class="my-10 space-y-1">
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
      <div class="flex items-center gap-1.5">
        <div class="font-base text-sm">
          {format(new Date(post.data.date), "dd MMMM yyyy")}
        </div>
        &bull;
        {
          post.body && (
            <div class="font-base text-sm">
              {remarkPluginFrontmatter.minutesRead}
            </div>
          )
        }
      </div>

      {
        post.data.tags && post.data.tags?.length > 0 ? (
          <div class="animate flex gap-2 pt-1">
            {post.data.tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class="rounded-sm border border-black/15 px-2 py-1 text-sm transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"
              >
                {tag}
              </a>
            ))}
          </div>
        ) : null
      }
    </div>
    {headings.length > 0 && <TableOfContents headings={headings} />}
    <article class="animate">
      <Content />
      <!-- <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div> -->
    </article>
  </Container>
</Layout>
